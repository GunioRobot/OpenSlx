using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Sage.SalesLogix.NHibernate;
using NHibernate.SqlCommand;

/*
    OpenSlx - Open Source SalesLogix Library and Tools
    Copyright (C) 2010 Sailfish Consulting

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

namespace OpenSlx.Lib.Db
{
    /// <summary>
    /// A custom SalesLogix SQL dialect for NHibernate.  This can be used to introduce custom constructs in the
    /// SQL generated by NHibernate.
    /// 
    /// To use this dialect, either edit the hibernate.xml file under the deployed web site, and add it to the 
    /// supportfiles, or edit the code template for the hibernate.xml file, under 
    /// Model\Entity Model\CodeTemplates\Entity.
    /// </summary>
    public class SlxCustomDialect : SLXDialect
    {
        /// <summary>
        /// Return customized limit string (for paging queries)
        /// For performance reason the limit string is ommitted when querying the first page.
        /// </summary>
        /// <param name="querySqlString"></param>
        /// <param name="offset"></param>
        /// <param name="last"></param>
        /// <returns></returns>
        public override NHibernate.SqlCommand.SqlString GetLimitString(NHibernate.SqlCommand.SqlString querySqlString, int offset, int last)
        {
            if (!querySqlString.StartsWithCaseInsensitive("select "))
            {
                throw new ArgumentException("querySqlString should start with select", "querySqlString");
            }
            SqlString sqlString = querySqlString.Substring(6);
            string orderSql = querySqlString.SubstringStartingWithLast("order by").ToString();
            if (orderSql.Length != 0)
            {
                sqlString = sqlString.Substring(0, (sqlString.Length - orderSql.Length) - 1);
            }
            SqlStringBuilder builder = new SqlStringBuilder();
            int num = offset + 1;
            builder.Add("SELECT TOP ").Add(last.ToString()).Add(" ").Add(sqlString);
            if(offset > 0)
                builder.Add(" WITH FIRSTROW ").Add(num.ToString());
            if (orderSql.Length > 0)
            {
                builder.Add(" ").Add(orderSql);
            }
            return builder.ToSqlString();
        }
    }
}
